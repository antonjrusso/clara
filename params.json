{"name":"Clara","tagline":"Cluster Administration tools","body":"# What's Clara?\r\n\r\nClara is a set of cluster administration tools created to help in the\r\ninstallation and maintenance of clusters at EDF.\r\n\r\nThe different tools are written as independent plugins that can be added,\r\nremoved and modified independently.\r\n\r\nClara is distributed under the CeCILL-C Free Software License Agreement version\r\n1.0. You can find more information about the CeCILL licenses at\r\n[http://www.cecill.info/index.en.html](http://www.cecill.info/index.en.html).\r\n\r\n\r\n# Obtaining, building and installing Clara\r\n\r\nClara's code is available at GitHub [https://github.com/edf-hpc/clara](https://github.com/edf-hpc/clara).\r\nYou can obtain a copy using *git*:\r\n\r\n    $ git clone https://github.com/edf-hpc/clara.git\r\n\r\nClara is developed and probably only useful in a Debian or a Debian derivative\r\nsystem. The debian packaging files are included, so you only need to build\r\na Debian package and install it.\r\nBefore building the package, you will need to install the following packages:\r\n\r\n    # apt-get install debhelper python-all python-setuptools pandoc bash-completion dpkg-dev\r\n\r\nAnd then from the root directory of your git copy, you can run:\r\n\r\n    # dpkg-buildpackage\r\n\r\nThis will create a package you can install with dpkg.\r\n\r\nIf you're not using Debian, Clara provides a setuptools script for its installation.\r\nJust run:\r\n\r\n    # python setup.py install\r\n\r\nIf you chose to install manually, you also will need to install the runtime\r\ndependencies. The dependencies common to all plugins are:\r\n[python](http://www.python.org), [docopt](http://docopt.org/) and [clustershell](http://cea-hpc.github.io/clustershell/).\r\n\r\nThe remaining dependencies, listed by plugin, are:\r\n\r\n+ slurm: [slurm-client](http://slurm.schedmd.com/)\r\n\r\n+ repo: [reprepro](http://mirrorer.alioth.debian.org/), [gnupg](https://www.gnupg.org/), [debmirror](https://packages.debian.org/sid/debmirror)\r\n\r\n+ impi: [fping](http://fping.org/), [ipmitool](http://sourceforge.net/projects/ipmitool/)\r\n\r\n+ images: [debootstrap](https://packages.debian.org/sid/debootstrap), [squashfs-tools](http://squashfs.sourceforge.net/)\r\n\r\n+ p2p: [mktorrent](http://mktorrent.sourceforge.net/)\r\n\r\n+ build: [cowbuilder](https://wiki.debian.org/cowbuilder)\r\n\r\n# Getting started\r\n\r\nClara itself is not a tool, but rather provides a common interface to several\r\ntools. To see the list of available tools, just type `clara` like in the following\r\nexample.\r\n\r\n    # clara\r\n\r\n    Usage: clara [options] <plugin> [<args>...]\r\n           clara help <plugin>\r\n           clara [--version]\r\n           clara [--help]\r\n\r\n    Options:\r\n        -d                 Enable debug output\r\n        --config=<file>    Provide a configuration file\r\n\r\n    Clara provides the following plugins:\r\n       repo     Creates, updates and synchronizes local Debian repositories.\r\n       ipmi     Manages and get the status from the nodes of a cluster.\r\n       slurm    Performs tasks using SLURM's controller.\r\n       images   Creates and updates the images of installation of a cluster.\r\n       p2p      Makes torrent images and seeds them via BitTorrent.\r\n       enc      Interact with encrypted files using configurable methods\r\n       build    Builds Debian packages\r\n\r\n    See 'clara help <plugin>' for detailed help on a plugin\r\n    and 'clara <plugin> --help' for a quick list of options of a plugin.\r\n\r\n\r\nThen to use the tool *repo*, just type `clara repo` and it'll show you the\r\noptions of *repo*:\r\n\r\n    # clara repo\r\n    Usage:\r\n        clara repo key\r\n        clara repo init <dist>\r\n        clara repo sync (all|<dist> [<suites>...])\r\n        clara repo add <dist> <file>... [--reprepro-flags=\"list of flags\"...]\r\n        clara repo del <dist> <name>...\r\n        clara repo list <dist>\r\n        clara repo -h | --help | help\r\n\r\n\r\nYou can check quickly the help of the tool *repo* invoking the manpage:\r\n`man clara-repo` or just typing `clara help repo`.\r\n\r\n# Configuration file\r\n\r\nThe configuration file of Clara is installed at `/etc/clara/config.ini` and it\r\nis a simple text file using the [INI file format](http://en.wikipedia.org/wiki/INI_file).\r\nThis file has a basic structure composed of sections, properties, and values.\r\nFor example, a portion from the Clara's configuration file is copied:\r\n\r\n    [common]\r\n    ; File: Contains the usernames and passwords needed by the scripts\r\n    master_passwd_file=/srv/clara/data/master_pwd\r\n    ; List: Posible distributions to be used if we're using multi-distro\r\n    allowed_distributions=calibre8,calibre9\r\n    ; String: Name of your Debian derivative by default\r\n    default_distribution=calibre8\r\n    ; String: Name of the team or departament maintaining the repository\r\n    ; It's only used by reprepro\r\n    origin=HPC\r\n\r\n    [repo]\r\n    ; String: Name of your cluster or project.\r\n    clustername=cluster\r\n    ; String: Version number of your debian derivative\r\n    version=8.0.0\r\n    ; Path: Directory containing all the configuration files for the local repository\r\n    repo_dir=/srv/clara/calibre8/local-mirror\r\n\r\n\r\nThe lines starting with a semi-colon are commentaries and they're ignored.\r\n\r\n`[common]` and `[repo]` indicate the begin of a section and its name.\r\n\r\nThe remaining lines contain properties. Every property has a name and a value,\r\ndelimited by an equals sign (=). The name appears to the left of the equals sign\r\nand the value appears to the right. All properties listed after a section\r\ndeclaration are associated with that section.\r\n\r\nThe section `[common]` is common to all the plugins and then every plugin\r\ncan add a section with the name of the plugin.\r\n\r\nSometimes, we want to add specific values for different distros and in that case\r\nwe'll need to add the name of the plugin, a hyphen `-` followed by the name of\r\nthe distribution. For example, if we want to add different configurations\r\nvalues for the plugin `repo` for calibre8 and calibre9, we'll need to add them\r\nunder the sections `[repo-calibre8]` and `[repo-calibre9]`.\r\n\r\n\r\n# Plugins\r\n\r\n## Plugin 'repo'\r\n\r\n*clara repo* offers simple commands to create a local Debian repository with\r\nreprepro and update, add and remove files from them. It also provides the\r\npossibility of making mirror of remote Debian repositories locally.\r\n\r\n### Sypnosis\r\n\r\n    clara repo key\r\n    clara repo init <dist>\r\n    clara repo sync (all|<dist> [<suites>...])\r\n    clara repo add <dist> <file>... [--reprepro-flags=\"list of flags\"...]\r\n    clara repo del <dist> <name>...\r\n    clara repo list <dist>\r\n    clara repo -h | --help | help\r\n\r\nOptions:\r\n\r\n    <file> can be one or more *.deb binaries, *.changes files or *.dsc files.\r\n\r\n    <name> is the package to remove, if the package is a source name, it'll\r\n    remove all the associated binaries\r\n\r\n### Options\r\n\r\n    clara repo key\r\n\r\nInstall the secret GPG key to use in the repository.\r\n\r\n    clara repo init <dist>\r\n\r\nCreate the initial configuration for reprepro for our local repository and makes\r\nthe first export.\r\n\r\n    clara repo sync (all|<dist> [<suites>...])\r\n\r\nMirror locally a Debian suite. We can choose a single suite such as wheezy,\r\nwheezy-backports, calibre8, etc; we can choose all the suites with the parameter\r\n'all' or just all the suites used by a distribution.\r\n\r\n    clara repo add <dist> <file>... [--reprepro-flags=\"list of flags\"...]\r\n\r\nAdd packages to the local repository.\r\n`<file>` can be one or more *.deb binaries, *.changes files or *.dsc files.\r\nFor the --reprepro-flags, check the documentation of reprepro.\r\n\r\n    clara repo del <dist> <name>...\r\n\r\nRemove package to the local repository.\r\n`<name>` is the package to remove, if the package is a source name, it'll also\r\nremove all the associated binaries.\r\n\r\n    clara repo list <dist>\r\n\r\nLists all contents of the repository.\r\n\r\nThis distribution in <dist> must be listed in the field \"allowed_distributions\"\r\nfrom the section [common].\r\n\r\n### Examples\r\n\r\nTo mirror locally all the suites from calibre8:\r\n\r\n    # clara repo sync calibre8\r\n\r\nTo mirror locally Debian backports for Wheezy:\r\n\r\n    # clara repo sync calibre8 wheezy-backports\r\n\r\nTo create a local repository and add packages to it:\r\n\r\n    # clara repo key\r\n    # clara repo init calibre8\r\n    # clara repo add calibre8 mypackage_1-2.dsc\r\n\r\n## Plugin 'ipmi'\r\n\r\n*clara ipmi* offers a simplified interface of ipmitool, an utility for controlling\r\nIPMI-enabled devices. The username and password needed by ipmitool are handled\r\nautomatically.\r\n\r\n### Sypnosis\r\n\r\n    clara ipmi connect [-jf] <host>\r\n    clara ipmi deconnect <hostlist>\r\n    clara ipmi (on|off|reboot) <hostlist>\r\n    clara ipmi status <hostlist>\r\n    clara ipmi setpwd <hostlist>\r\n    clara ipmi getmac <hostlist>\r\n    clara ipmi pxe <hostlist>\r\n    clara ipmi disk <hostlist>\r\n    clara ipmi ping <hostlist>\r\n    clara ipmi blink <hostlist>\r\n    clara ipmi immdhcp <hostlist>\r\n    clara ipmi bios <hostlist>\r\n    clara ipmi reset <hostlist>\r\n    clara ipmi -h | --help\r\n\r\n    clara ipmi <host> connect [-jf]\r\n    clara ipmi <hostlist> deconnect\r\n    clara ipmi <hostlist> (on|off|reboot)\r\n    clara ipmi <hostlist> status\r\n    clara ipmi <hostlist> setpwd\r\n    clara ipmi <hostlist> getmac\r\n    clara ipmi <hostlist> pxe\r\n    clara ipmi <hostlist> disk\r\n    clara ipmi <hostlist> ping\r\n    clara ipmi <hostlist> blink\r\n    clara ipmi <hostlist> immdhcp\r\n    clara ipmi <hostlist> bios\r\n    clara ipmi <hostlist> reset\r\n\r\n### Options\r\n\r\n    clara ipmi connect [-jf] <host>\r\n\r\nConnect to IMM serial console, including video, keyboard and mouse controlling\r\nThe flag -j joins the connection and the flag -f forces it.\r\n\r\n    clara ipmi deconnect <host>\r\n\r\nDeconnect from a IMM serial console\r\n\r\n    clara ipmi on <hostlist>\r\n\r\nPower up chassis\r\n\r\n    clara ipmi off <hostlist>\r\n\r\nPower down chassis into soft off. WARNING: it does do a clean shutdown of the OS.\r\n\r\n    clara ipmi reboot <hostlist>\r\n\r\nThis command will perform a hard reset\r\n\r\n    clara ipmi status <hostlist>\r\n\r\nGet target node power status using the IMM device\r\n\r\n    clara ipmi setpwd <hostlist>\r\n\r\nSet up IMM user id/password on a new device\r\n\r\n    clara ipmi getmac <hostlist>\r\n\r\nGet node MAC addresses using the IMM device\r\n\r\n    clara ipmi pxe <hostlist>\r\n\r\nUse IMM to perform a network boot on the next reboot\r\n\r\n    clara ipmi disk <hostlist>\r\n\r\nUse IMM to perform a disk boot on the next reboot\r\n\r\n    clara ipmi ping <hostlist>\r\n\r\nUse fping to check status of the machines\r\n\r\n    clara ipmi blink <hostlist>\r\n\r\nMake chassis blink to help on-site admins to identify the machine\r\n\r\n    clara ipmi immdhcp <hostlist>\r\n\r\nSet selected ipmi interfaces to grab an IP via DHCP\r\n\r\n    clara ipmi bios <hostlist>\r\n\r\nMake selected machines go directly into BIOS on next reboot\r\n\r\n    clara ipmi reset <hostlist>\r\n\r\nReset the IMM device (cold reset)\r\n\r\n\r\n### Examples\r\n\r\nThis command will ping all hosts nodes from node12 to n99:\r\n\r\n    # clara ipmi ping node[12-99]\r\n\r\nTo check the status from node13:\r\n\r\n    # clara ipmi status node13\r\n\r\nOr also:\r\n\r\n    # clara ipmi node13 status\r\n\r\n## Plugin 'slurm'\r\n\r\n*clara slurm* provides a simplified interface to the most useful commands from\r\nSLURM.\r\n\r\n### Sypnosis\r\n\r\n    clara slurm health <nodeset>\r\n    clara slurm resume <nodeset>\r\n    clara slurm drain [<nodeset>] [<reason>...]\r\n    clara slurm down [<nodeset>]\r\n    clara slurm <cmd> <subject> [<op>] [<spec>...]\r\n    clara slurm -h | --help\r\n\r\nOptions:\r\n    <op> is one of the following ones: show, create, update and delete.\r\n\r\n    <cmd> is one of the following ones: job, node, steps, frontend,\r\n    partition, reservation, block and submp.\r\n\r\n### Options\r\n\r\n    clara slurm health <nodeset>\r\n\r\nShow nodes' health\r\n\r\n    clara slurm resume <nodeset>\r\n\r\nResume the nodes.\r\n\r\n    clara slurm drain [<nodeset>] [<reason>...]\r\n\r\nShows drained nodes and reason why they have been drained, when used without arguments.\r\nWhen it is given a nodeset, it drains the specified nodes.\r\n\r\n    clara slurm down [<nodeset>]\r\n\r\nShows nodes down when used without arguments.\r\nWhen it is given a nodeset, it puts down the specified nodes.\r\n\r\n    clara slurm <cmd> <subject> [<op>] [<spec>...]\r\n\r\nSimplified interface for scontrol.\r\nNot all the <op> options are compatible with any `<cmd>` option but clara\r\nwill warn you of not allowed combinations.\r\n\r\n### Examples\r\n\r\nPut the nodes node[3-6] down\r\n\r\n    # clara slurm down node[3-6]\r\n\r\n## Plugin 'images'\r\n\r\n*clara images* makes easy to create and update the images to boot the nodes of\r\na cluster.\r\n\r\n### Sypnosis\r\n\r\n    clara images create <dist> [<image>] [--keep-chroot-dir]\r\n    clara images unpack ( <dist> | --image=<path> )\r\n    clara images repack <directory> ( <dist> | --image=<path> )\r\n    clara images edit <dist> [<image>]\r\n    clara images initrd <dist> [--output=<dirpath>]\r\n    clara images -h | --help | help\r\n\r\nOptions:\r\n\r\n    --image=<path>  Path to squashfs image.\r\n\r\n### Options\r\n\r\n    clara images create <dist> [<image>] [--keep-chroot-dir]\r\n\r\nCreate a new squashfs image to use as operating system on the cluster nodes.\r\nBy default it unpacks the default image but the user can provide the path to a\r\ndifferent file.\r\nThe option `--keep-chroot-dir` allows to create the chroot used to generate\r\nthe image. By default, this chroot directory is deleted.\r\n\r\n    clara images unpack ( <dist> | --image=<path> )\r\n\r\nUnpack the squashfs file. By default it unpacks the default image but the user\r\ncan provide the path to a different file.\r\n\r\n    clara images repack <directory> ( <dist> | --image=<path> )\r\n\r\nRepack the squashfs file providing the image.  By default it repacks and replace\r\nthe default image but the user can choose to provide a path to save it with a\r\ndifferent name.\r\n\r\n    clara images edit <dist> [<image>]\r\n\r\nUnpacks the image for editing, spawns a bash to make the changes and repacks\r\nthe image again after. By default it edits the default image but the user can\r\nprovide the path to a different image.\r\n\r\n    clara images initrd <dist> [--output=<dirpath>]\r\n\r\nCreate a new initrd image to boot the cluster nodes.\r\nThe user can use the `--output` option to select a directory different to the\r\ndefault one to save the generated initrd.\r\n\r\nThis distribution in <dist> must be listed in the field \"allowed_distributions\"\r\nfrom the section [common].\r\n\r\n\r\n### Examples\r\n\r\nTo create a image for calibre8 and store it in `/tmp/c8.squashfs`\r\n\r\n    # clara images create calibre8 /tmp/c8.squashfs\r\n\r\nTo edit the default distribution image\r\n\r\n    # clara images edit calibre8\r\n\r\nTo create a initrd for the default distribution image:\r\n\r\n     # clara images initrd calibre8\r\n\r\n## Plugin 'p2p'\r\n\r\n*clara p2p* eases creating torrent files for the cluster installation images\r\nand controlling the seeders and trackers of the cluster to see the new torrent\r\nfile.\r\n\r\n### Synopsis\r\n\r\n    clara p2p status\r\n    clara p2p restart\r\n    clara p2p mktorrent <dist> [--image=<path>]\r\n    clara p2p -h | --help | help\r\n\r\n### Options\r\n\r\n    clara p2p status\r\n\r\nCheck the status of the BitTorrent trackers and seeders\r\n\r\n    clara p2p restart\r\n\r\nRestart the BitTorrent trackers and seeders\r\n\r\n    clara p2p mktorrent <dist> [--image=<path>]\r\n\r\nCreate a new torrent file for the squashfs image and restart trackers\r\nand initial seeders. The distribution in <dist> must be listed in the field\r\n\"allowed_distributions\" from the section [common].\r\n\r\n### Examples\r\n\r\nTo create a torrent file for the images placed at `/tmp/calibre9.squashfs`\r\n\r\n    # clara p2p mktorrent calibre9 --image=/tmp/calibre9.squashfs\r\n\r\n## Plugin 'enc'\r\n\r\n*clara enc* shows, edits and creates encrypted files using configurable methods\r\nto get the encryption key and encrypt/decrypt files.\r\n\r\n### Synopsis\r\n\r\n    clara enc show <file>\r\n    clara enc edit <file>\r\n    clara enc encode <file>\r\n    clara enc decode <file>\r\n    clara enc -h | --help | help\r\n\r\n### Options\r\n\r\n    clara enc show <file>\r\n\r\nShows a encoded filed in plain in the terminal. It'll use `$PAGER` to show it.\r\n\r\n    clara enc edit <file>\r\n\r\nAllows to create or edit a file that will be automatically encoded after closing\r\nthe editor and the copy in plain text will be erased. It'll use `$EDITOR` to edit it.\r\n\r\n    clara enc encode <file>\r\n\r\nIt will encode a file. The resulting file will have the same name than\r\nthe original appendix the suffix \".enc\"\r\n\r\n    clara enc decode <file>\r\n\r\nIt will decode a encrypted file. The encrypted file must have the suffix \".enc\"\r\nin its name. The resulting file will have the same name than the original without\r\nthe suffix \".enc\"\r\n\r\n### Examples\r\n\r\nTo create an encrypted file in `/data/mydata.enc`:\r\n\r\n    # clara enc edit /data/mydata.enc\r\n\r\nTo see quickly the contents of an encrypted file:\r\n\r\n    # clara enc show this_is_my_file.enc\r\n\r\nTo create a plain text copy of an encrypted file:\r\n\r\n     # clara en decode this_is_my_file.enc\r\n\r\nThis will create an unencrypted file \"this_is_my_file\"\r\n\r\n\r\n## Plugin 'build'\r\n\r\n*clara build* allows to build packages for any of the custom distributions\r\nand also rebuild a package that's already in the local repository of another\r\ncustom distribution.\r\nThis plugin requires *cowbuilder* installed and configured.\r\n\r\n\r\n### Synopsis\r\n\r\n    clara build source <dist> <dsc_file>\r\n    clara build repo <dist> <origin_dist> <package_name>\r\n    clara build -h | --help | help\r\n\r\n### Options\r\n\r\n    clara build source <dist> <dsc_file>\r\n\r\nBuild a source package targetting the distro indicated.\r\n\r\n    clara build repo <dist> <origin_dist> <package_name>\r\n\r\nRebuilds a package from the local repository of the \"origin_dist\" for the distro\r\nindicated. The repository must contain the source package of the package we want\r\nto rebuild.\r\n\r\n\r\n### Examples\r\n\r\nTo build the source package of calibre-hpc for calibre8 that is at /tmp/calibre-hpc_1.2.dsc\r\n\r\n    # clara build calibre8 /tmp/calibre-hpc_1.2.dsc\r\n\r\nTo rebuild the same package for calibre9 using the package in the local repository\r\nof calibre8:\r\n\r\n    # clara build calibre8 calibre9 calibre-hpc\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}